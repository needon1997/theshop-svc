// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSVCClient is the client API for UserSVC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSVCClient interface {
	GetUserList(ctx context.Context, in *PageInfoRequest, opts ...grpc.CallOption) (*UserListInfoResponse, error)
	GetUserByEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	GetUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	CreateUser(ctx context.Context, in *CreateUserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*Empty, error)
	ComparePassword(ctx context.Context, in *ComparePasswordRequest, opts ...grpc.CallOption) (*BoolResponse, error)
}

type userSVCClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSVCClient(cc grpc.ClientConnInterface) UserSVCClient {
	return &userSVCClient{cc}
}

func (c *userSVCClient) GetUserList(ctx context.Context, in *PageInfoRequest, opts ...grpc.CallOption) (*UserListInfoResponse, error) {
	out := new(UserListInfoResponse)
	err := c.cc.Invoke(ctx, "/UserSVC/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSVCClient) GetUserByEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/UserSVC/GetUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSVCClient) GetUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/UserSVC/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSVCClient) CreateUser(ctx context.Context, in *CreateUserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/UserSVC/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSVCClient) UpdateUser(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/UserSVC/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSVCClient) ComparePassword(ctx context.Context, in *ComparePasswordRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/UserSVC/ComparePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSVCServer is the server API for UserSVC service.
// All implementations must embed UnimplementedUserSVCServer
// for forward compatibility
type UserSVCServer interface {
	GetUserList(context.Context, *PageInfoRequest) (*UserListInfoResponse, error)
	GetUserByEmail(context.Context, *EmailRequest) (*UserInfoResponse, error)
	GetUserById(context.Context, *IdRequest) (*UserInfoResponse, error)
	CreateUser(context.Context, *CreateUserInfoRequest) (*UserInfoResponse, error)
	UpdateUser(context.Context, *UpdateUserInfoRequest) (*Empty, error)
	ComparePassword(context.Context, *ComparePasswordRequest) (*BoolResponse, error)
	mustEmbedUnimplementedUserSVCServer()
}

// UnimplementedUserSVCServer must be embedded to have forward compatible implementations.
type UnimplementedUserSVCServer struct {
}

func (UnimplementedUserSVCServer) GetUserList(context.Context, *PageInfoRequest) (*UserListInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserSVCServer) GetUserByEmail(context.Context, *EmailRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedUserSVCServer) GetUserById(context.Context, *IdRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserSVCServer) CreateUser(context.Context, *CreateUserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserSVCServer) UpdateUser(context.Context, *UpdateUserInfoRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserSVCServer) ComparePassword(context.Context, *ComparePasswordRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComparePassword not implemented")
}
func (UnimplementedUserSVCServer) mustEmbedUnimplementedUserSVCServer() {}

// UnsafeUserSVCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSVCServer will
// result in compilation errors.
type UnsafeUserSVCServer interface {
	mustEmbedUnimplementedUserSVCServer()
}

func RegisterUserSVCServer(s grpc.ServiceRegistrar, srv UserSVCServer) {
	s.RegisterService(&UserSVC_ServiceDesc, srv)
}

func _UserSVC_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSVCServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSVC/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSVCServer).GetUserList(ctx, req.(*PageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSVC_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSVCServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSVC/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSVCServer).GetUserByEmail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSVC_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSVCServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSVC/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSVCServer).GetUserById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSVC_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSVCServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSVC/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSVCServer).CreateUser(ctx, req.(*CreateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSVC_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSVCServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSVC/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSVCServer).UpdateUser(ctx, req.(*UpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSVC_ComparePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComparePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSVCServer).ComparePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserSVC/ComparePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSVCServer).ComparePassword(ctx, req.(*ComparePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSVC_ServiceDesc is the grpc.ServiceDesc for UserSVC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSVC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserSVC",
	HandlerType: (*UserSVCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserList",
			Handler:    _UserSVC_GetUserList_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _UserSVC_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UserSVC_GetUserById_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserSVC_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserSVC_UpdateUser_Handler,
		},
		{
			MethodName: "ComparePassword",
			Handler:    _UserSVC_ComparePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
