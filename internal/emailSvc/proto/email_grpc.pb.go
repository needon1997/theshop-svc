// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailSvcClient is the client API for EmailSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailSvcClient interface {
	SendVerificationCode(ctx context.Context, in *ReceiverInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	VerifyVerificationCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	SendMarketingEmail(ctx context.Context, in *MarketingInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendTransactionalEmail(ctx context.Context, in *TransactionalInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type emailSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailSvcClient(cc grpc.ClientConnInterface) EmailSvcClient {
	return &emailSvcClient{cc}
}

func (c *emailSvcClient) SendVerificationCode(ctx context.Context, in *ReceiverInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/EmailSvc/SendVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSvcClient) VerifyVerificationCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/EmailSvc/VerifyVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSvcClient) SendMarketingEmail(ctx context.Context, in *MarketingInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/EmailSvc/SendMarketingEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailSvcClient) SendTransactionalEmail(ctx context.Context, in *TransactionalInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/EmailSvc/SendTransactionalEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailSvcServer is the server API for EmailSvc service.
// All implementations must embed UnimplementedEmailSvcServer
// for forward compatibility
type EmailSvcServer interface {
	SendVerificationCode(context.Context, *ReceiverInfoRequest) (*empty.Empty, error)
	VerifyVerificationCode(context.Context, *VerifyCodeRequest) (*VerifyResponse, error)
	SendMarketingEmail(context.Context, *MarketingInfoRequest) (*empty.Empty, error)
	SendTransactionalEmail(context.Context, *TransactionalInfoRequest) (*empty.Empty, error)
	mustEmbedUnimplementedEmailSvcServer()
}

// UnimplementedEmailSvcServer must be embedded to have forward compatible implementations.
type UnimplementedEmailSvcServer struct {
}

func (UnimplementedEmailSvcServer) SendVerificationCode(context.Context, *ReceiverInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationCode not implemented")
}
func (UnimplementedEmailSvcServer) VerifyVerificationCode(context.Context, *VerifyCodeRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyVerificationCode not implemented")
}
func (UnimplementedEmailSvcServer) SendMarketingEmail(context.Context, *MarketingInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMarketingEmail not implemented")
}
func (UnimplementedEmailSvcServer) SendTransactionalEmail(context.Context, *TransactionalInfoRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransactionalEmail not implemented")
}
func (UnimplementedEmailSvcServer) mustEmbedUnimplementedEmailSvcServer() {}

// UnsafeEmailSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailSvcServer will
// result in compilation errors.
type UnsafeEmailSvcServer interface {
	mustEmbedUnimplementedEmailSvcServer()
}

func RegisterEmailSvcServer(s grpc.ServiceRegistrar, srv EmailSvcServer) {
	s.RegisterService(&EmailSvc_ServiceDesc, srv)
}

func _EmailSvc_SendVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiverInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSvcServer).SendVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmailSvc/SendVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSvcServer).SendVerificationCode(ctx, req.(*ReceiverInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSvc_VerifyVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSvcServer).VerifyVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmailSvc/VerifyVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSvcServer).VerifyVerificationCode(ctx, req.(*VerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSvc_SendMarketingEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSvcServer).SendMarketingEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmailSvc/SendMarketingEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSvcServer).SendMarketingEmail(ctx, req.(*MarketingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailSvc_SendTransactionalEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSvcServer).SendTransactionalEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmailSvc/SendTransactionalEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSvcServer).SendTransactionalEmail(ctx, req.(*TransactionalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailSvc_ServiceDesc is the grpc.ServiceDesc for EmailSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmailSvc",
	HandlerType: (*EmailSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVerificationCode",
			Handler:    _EmailSvc_SendVerificationCode_Handler,
		},
		{
			MethodName: "VerifyVerificationCode",
			Handler:    _EmailSvc_VerifyVerificationCode_Handler,
		},
		{
			MethodName: "SendMarketingEmail",
			Handler:    _EmailSvc_SendMarketingEmail_Handler,
		},
		{
			MethodName: "SendTransactionalEmail",
			Handler:    _EmailSvc_SendTransactionalEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "email.proto",
}
